<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWSSDK.ECR</name>
    </assembly>
    <members>
        <member name="T:Amazon.ECR.AmazonECRConfig">
            <summary>
            Configuration for accessing Amazon ECR service
            </summary>
        </member>
        <member name="M:Amazon.ECR.AmazonECRConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Amazon.ECR.AmazonECRConfig.RegionEndpointServiceName">
            <summary>
            The constant used to lookup in the region hash the endpoint.
            </summary>
        </member>
        <member name="P:Amazon.ECR.AmazonECRConfig.ServiceVersion">
            <summary>
            Gets the ServiceVersion property.
            </summary>
        </member>
        <member name="P:Amazon.ECR.AmazonECRConfig.UserAgent">
            <summary>
            Gets the value of UserAgent property.
            </summary>
        </member>
        <member name="T:Amazon.ECR.AmazonECRException">
            <summary>
             Common exception for the ECR service.
             </summary>
        </member>
        <member name="M:Amazon.ECR.AmazonECRException.#ctor(System.String)">
            <summary>
            Construct instance of AmazonECRException
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of AmazonECRException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRException.#ctor(System.Exception)">
            <summary>
            Construct instance of AmazonECRException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonECRException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonECRException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.ImageFailureCode">
            <summary>
            Constants used for properties of type ImageFailureCode.
            </summary>
        </member>
        <member name="F:Amazon.ECR.ImageFailureCode.ImageNotFound">
            <summary>
            Constant ImageNotFound for ImageFailureCode
            </summary>
        </member>
        <member name="F:Amazon.ECR.ImageFailureCode.ImageTagDoesNotMatchDigest">
            <summary>
            Constant ImageTagDoesNotMatchDigest for ImageFailureCode
            </summary>
        </member>
        <member name="F:Amazon.ECR.ImageFailureCode.InvalidImageDigest">
            <summary>
            Constant InvalidImageDigest for ImageFailureCode
            </summary>
        </member>
        <member name="F:Amazon.ECR.ImageFailureCode.InvalidImageTag">
            <summary>
            Constant InvalidImageTag for ImageFailureCode
            </summary>
        </member>
        <member name="F:Amazon.ECR.ImageFailureCode.MissingDigestAndTag">
            <summary>
            Constant MissingDigestAndTag for ImageFailureCode
            </summary>
        </member>
        <member name="M:Amazon.ECR.ImageFailureCode.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.ECR.ImageFailureCode.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.ECR.ImageFailureCode.op_Implicit(System.String)~Amazon.ECR.ImageFailureCode">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.LayerAvailability">
            <summary>
            Constants used for properties of type LayerAvailability.
            </summary>
        </member>
        <member name="F:Amazon.ECR.LayerAvailability.AVAILABLE">
            <summary>
            Constant AVAILABLE for LayerAvailability
            </summary>
        </member>
        <member name="F:Amazon.ECR.LayerAvailability.UNAVAILABLE">
            <summary>
            Constant UNAVAILABLE for LayerAvailability
            </summary>
        </member>
        <member name="M:Amazon.ECR.LayerAvailability.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.ECR.LayerAvailability.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.ECR.LayerAvailability.op_Implicit(System.String)~Amazon.ECR.LayerAvailability">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.LayerFailureCode">
            <summary>
            Constants used for properties of type LayerFailureCode.
            </summary>
        </member>
        <member name="F:Amazon.ECR.LayerFailureCode.InvalidLayerDigest">
            <summary>
            Constant InvalidLayerDigest for LayerFailureCode
            </summary>
        </member>
        <member name="F:Amazon.ECR.LayerFailureCode.MissingLayerDigest">
            <summary>
            Constant MissingLayerDigest for LayerFailureCode
            </summary>
        </member>
        <member name="M:Amazon.ECR.LayerFailureCode.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.ECR.LayerFailureCode.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.ECR.LayerFailureCode.op_Implicit(System.String)~Amazon.ECR.LayerFailureCode">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.AmazonECRRequest">
            <summary>
            Base class for ECR operation requests.
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.AuthorizationData">
            <summary>
            An object representing authorization data for an Amazon ECR registry.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.AuthorizationData.AuthorizationToken">
            <summary>
            Gets and sets the property AuthorizationToken. 
            <para>
            A base64-encoded string that contains authorization data for the specified Amazon
            ECR registry. When the string is decoded, it is presented in the format <code>user:password</code>
            for private registry authentication using <code>docker login</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.AuthorizationData.ExpiresAt">
            <summary>
            Gets and sets the property ExpiresAt. 
            <para>
            The Unix time in seconds and milliseconds when the authorization token expires. Authorization
            tokens are valid for 12 hours.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.AuthorizationData.ProxyEndpoint">
            <summary>
            Gets and sets the property ProxyEndpoint. 
            <para>
            The registry URL to use for this authorization token in a <code>docker login</code>
            command. The Amazon ECR registry URL format is <code>https://aws_account_id.dkr.ecr.region.amazonaws.com</code>.
            For example, <code>https://012345678910.dkr.ecr.us-east-1.amazonaws.com</code>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.BatchCheckLayerAvailabilityRequest">
            <summary>
            Container for the parameters to the BatchCheckLayerAvailability operation.
            Check the availability of multiple image layers in a specified registry and repository.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchCheckLayerAvailabilityRequest.LayerDigests">
            <summary>
            Gets and sets the property LayerDigests. 
            <para>
            The digests of the image layers to check.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchCheckLayerAvailabilityRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the image layers to
            check. If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchCheckLayerAvailabilityRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository that is associated with the image layers to check.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.BatchCheckLayerAvailabilityResponse">
            <summary>
            This is the response object from the BatchCheckLayerAvailability operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchCheckLayerAvailabilityResponse.Failures">
            <summary>
            Gets and sets the property Failures. 
            <para>
            Any failures associated with the call.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchCheckLayerAvailabilityResponse.Layers">
            <summary>
            Gets and sets the property Layers. 
            <para>
            A list of image layer objects corresponding to the image layer references in the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.BatchDeleteImageRequest">
            <summary>
            Container for the parameters to the BatchDeleteImage operation.
            Deletes a list of specified images within a specified repository. Images are specified
            with either <code>imageTag</code> or <code>imageDigest</code>.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchDeleteImageRequest.ImageIds">
            <summary>
            Gets and sets the property ImageIds. 
            <para>
            A list of image ID references that correspond to images to delete. The format of the
            <code>imageIds</code> reference is <code>imageTag=tag</code> or <code>imageDigest=digest</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchDeleteImageRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the image to delete.
            If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchDeleteImageRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository that contains the image to delete.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.BatchDeleteImageResponse">
            <summary>
            This is the response object from the BatchDeleteImage operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchDeleteImageResponse.Failures">
            <summary>
            Gets and sets the property Failures. 
            <para>
            Any failures associated with the call.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchDeleteImageResponse.ImageIds">
            <summary>
            Gets and sets the property ImageIds. 
            <para>
            The image IDs of the deleted images.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.BatchGetImageRequest">
            <summary>
            Container for the parameters to the BatchGetImage operation.
            Gets detailed information for specified images within a specified repository. Images
            are specified with either <code>imageTag</code> or <code>imageDigest</code>.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchGetImageRequest.ImageIds">
            <summary>
            Gets and sets the property ImageIds. 
            <para>
            A list of image ID references that correspond to images to describe. The format of
            the <code>imageIds</code> reference is <code>imageTag=tag</code> or <code>imageDigest=digest</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchGetImageRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the images to describe.
            If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchGetImageRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository that contains the images to describe.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.BatchGetImageResponse">
            <summary>
            This is the response object from the BatchGetImage operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchGetImageResponse.Failures">
            <summary>
            Gets and sets the property Failures. 
            <para>
            Any failures associated with the call.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchGetImageResponse.Images">
            <summary>
            Gets and sets the property Images. 
            <para>
            A list of image objects corresponding to the image references in the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.CompleteLayerUploadRequest">
            <summary>
            Container for the parameters to the CompleteLayerUpload operation.
            Inform Amazon ECR that the image layer upload for a specified registry, repository
            name, and upload ID, has completed. You can optionally provide a <code>sha256</code>
            digest of the image layer for data validation purposes.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CompleteLayerUploadRequest.LayerDigests">
            <summary>
            Gets and sets the property LayerDigests. 
            <para>
            The <code>sha256</code> digest of the image layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CompleteLayerUploadRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry to which to upload layers. If you
            do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CompleteLayerUploadRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository to associate with the image layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CompleteLayerUploadRequest.UploadId">
            <summary>
            Gets and sets the property UploadId. 
            <para>
            The upload ID from a previous <a>InitiateLayerUpload</a> operation to associate with
            the image layer.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.CompleteLayerUploadResponse">
            <summary>
            This is the response object from the CompleteLayerUpload operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CompleteLayerUploadResponse.LayerDigest">
            <summary>
            Gets and sets the property LayerDigest. 
            <para>
            The <code>sha256</code> digest of the image layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CompleteLayerUploadResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CompleteLayerUploadResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CompleteLayerUploadResponse.UploadId">
            <summary>
            Gets and sets the property UploadId. 
            <para>
            The upload ID associated with the layer.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.CreateRepositoryRequest">
            <summary>
            Container for the parameters to the CreateRepository operation.
            Creates an image repository.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CreateRepositoryRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name to use for the repository. The repository name may be specified on its own
            (such as <code>nginx-web-app</code>) or it can be prepended with a namespace to group
            the repository into a category (such as <code>project-a/nginx-web-app</code>).
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.CreateRepositoryResponse">
            <summary>
            This is the response object from the CreateRepository operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CreateRepositoryResponse.Repository">
            <summary>
            Gets and sets the property Repository.
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.DeleteRepositoryPolicyRequest">
            <summary>
            Container for the parameters to the DeleteRepositoryPolicy operation.
            Deletes the repository policy from a specified repository.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteRepositoryPolicyRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository policy
            to delete. If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteRepositoryPolicyRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository that is associated with the repository policy to delete.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.DeleteRepositoryPolicyResponse">
            <summary>
            This is the response object from the DeleteRepositoryPolicy operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteRepositoryPolicyResponse.PolicyText">
            <summary>
            Gets and sets the property PolicyText. 
            <para>
            The JSON repository policy that was deleted from the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteRepositoryPolicyResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteRepositoryPolicyResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.DeleteRepositoryRequest">
            <summary>
            Container for the parameters to the DeleteRepository operation.
            Deletes an existing image repository. If a repository contains images, you must use
            the <code>force</code> option to delete it.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteRepositoryRequest.Force">
            <summary>
            Gets and sets the property Force. 
            <para>
            Force the deletion of the repository if it contains images.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteRepositoryRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository to delete.
            If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteRepositoryRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository to delete.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.DeleteRepositoryResponse">
            <summary>
            This is the response object from the DeleteRepository operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteRepositoryResponse.Repository">
            <summary>
            Gets and sets the property Repository.
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.DescribeRepositoriesRequest">
            <summary>
            Container for the parameters to the DescribeRepositories operation.
            Describes image repositories in a registry.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeRepositoriesRequest.MaxResults">
            <summary>
            Gets and sets the property MaxResults. 
            <para>
            The maximum number of repository results returned by <code>DescribeRepositories</code>
            in paginated output. When this parameter is used, <code>DescribeRepositories</code>
            only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code>
            response element. The remaining results of the initial request can be seen by sending
            another <code>DescribeRepositories</code> request with the returned <code>nextToken</code>
            value. This value can be between 1 and 100. If this parameter is not used, then <code>DescribeRepositories</code>
            returns up to 100 results and a <code>nextToken</code> value, if applicable.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeRepositoriesRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value returned from a previous paginated <code>DescribeRepositories</code>
            request where <code>maxResults</code> was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results that
            returned the <code>nextToken</code> value. This value is <code>null</code> when there
            are no more results to return.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeRepositoriesRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repositories to
            be described. If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeRepositoriesRequest.RepositoryNames">
            <summary>
            Gets and sets the property RepositoryNames. 
            <para>
            A list of repositories to describe. If this parameter is omitted, then all repositories
            in a registry are described. 
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.DescribeRepositoriesResponse">
            <summary>
            This is the response object from the DescribeRepositories operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeRepositoriesResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value to include in a future <code>DescribeRepositories</code>
            request. When the results of a <code>DescribeRepositories</code> request exceed <code>maxResults</code>,
            this value can be used to retrieve the next page of results. This value is <code>null</code>
            when there are no more results to return.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeRepositoriesResponse.Repositories">
            <summary>
            Gets and sets the property Repositories. 
            <para>
            A list of repository objects corresponding to valid repositories.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.EmptyUploadException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.EmptyUploadException.#ctor(System.String)">
            <summary>
            Constructs a new EmptyUploadException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.EmptyUploadException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of EmptyUploadException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.EmptyUploadException.#ctor(System.Exception)">
            <summary>
            Construct instance of EmptyUploadException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.EmptyUploadException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of EmptyUploadException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.EmptyUploadException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of EmptyUploadException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.GetAuthorizationTokenRequest">
            <summary>
            Container for the parameters to the GetAuthorizationToken operation.
            Retrieves a token that is valid for a specified registry for 12 hours. This command
            allows you to use the <code>docker</code> CLI to push and pull images with Amazon
            ECR. If you do not specify a registry, the default registry is assumed.
            
             
            <para>
            The <code>authorizationToken</code> returned for each registry specified is a base64
            encoded string that can be decoded and used in a <code>docker login</code> command
            to authenticate to a registry. The AWS CLI offers an <code>aws ecr get-login</code>
            command that simplifies the login process.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetAuthorizationTokenRequest.RegistryIds">
            <summary>
            Gets and sets the property RegistryIds. 
            <para>
            A list of AWS account IDs that are associated with the registries for which to get
            authorization tokens. If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.GetAuthorizationTokenResponse">
            <summary>
            This is the response object from the GetAuthorizationToken operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetAuthorizationTokenResponse.AuthorizationData">
            <summary>
            Gets and sets the property AuthorizationData. 
            <para>
            A list of authorization token data objects that correspond to the <code>registryIds</code>
            values in the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.GetDownloadUrlForLayerRequest">
            <summary>
            Container for the parameters to the GetDownloadUrlForLayer operation.
            Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer. You
            can only get URLs for image layers that are referenced in an image.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetDownloadUrlForLayerRequest.LayerDigest">
            <summary>
            Gets and sets the property LayerDigest. 
            <para>
            The digest of the image layer to download.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetDownloadUrlForLayerRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the image layer to download.
            If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetDownloadUrlForLayerRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository that is associated with the image layer to download.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.GetDownloadUrlForLayerResponse">
            <summary>
            This is the response object from the GetDownloadUrlForLayer operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetDownloadUrlForLayerResponse.DownloadUrl">
            <summary>
            Gets and sets the property DownloadUrl. 
            <para>
            The pre-signed Amazon S3 download URL for the requested layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetDownloadUrlForLayerResponse.LayerDigest">
            <summary>
            Gets and sets the property LayerDigest. 
            <para>
            The digest of the image layer to download.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.GetRepositoryPolicyRequest">
            <summary>
            Container for the parameters to the GetRepositoryPolicy operation.
            Retrieves the repository policy for a specified repository.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetRepositoryPolicyRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository. If you
            do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetRepositoryPolicyRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository whose policy you want to retrieve.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.GetRepositoryPolicyResponse">
            <summary>
            This is the response object from the GetRepositoryPolicy operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetRepositoryPolicyResponse.PolicyText">
            <summary>
            Gets and sets the property PolicyText. 
            <para>
            The JSON repository policy text associated with the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetRepositoryPolicyResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetRepositoryPolicyResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.Image">
            <summary>
            Object representing an image.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Image.ImageId">
            <summary>
            Gets and sets the property ImageId. 
            <para>
            An object containing the image tag and image digest associated with an image.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Image.ImageManifest">
            <summary>
            Gets and sets the property ImageManifest. 
            <para>
            The image manifest associated with the image.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Image.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry containing the image.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Image.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository associated with the image.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.ImageAlreadyExistsException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.ImageAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructs a new ImageAlreadyExistsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.ImageAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ImageAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.ImageAlreadyExistsException.#ctor(System.Exception)">
            <summary>
            Construct instance of ImageAlreadyExistsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.ImageAlreadyExistsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ImageAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.ImageAlreadyExistsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ImageAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.ImageFailure">
            <summary>
            
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ImageFailure.FailureCode">
            <summary>
            Gets and sets the property FailureCode. 
            <para>
            The code associated with the failure.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ImageFailure.FailureReason">
            <summary>
            Gets and sets the property FailureReason. 
            <para>
            The reason for the failure.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ImageFailure.ImageId">
            <summary>
            Gets and sets the property ImageId. 
            <para>
            The image ID associated with the failure.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.ImageIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ImageIdentifier.ImageDigest">
            <summary>
            Gets and sets the property ImageDigest. 
            <para>
            The <code>sha256</code> digest of the image manifest.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ImageIdentifier.ImageTag">
            <summary>
            Gets and sets the property ImageTag. 
            <para>
            The tag used for the image.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.InitiateLayerUploadRequest">
            <summary>
            Container for the parameters to the InitiateLayerUpload operation.
            Notify Amazon ECR that you intend to upload an image layer. 
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.InitiateLayerUploadRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that you intend to upload layers to.
            If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.InitiateLayerUploadRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository that you intend to upload layers to.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.InitiateLayerUploadResponse">
            <summary>
            This is the response object from the InitiateLayerUpload operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.InitiateLayerUploadResponse.PartSize">
            <summary>
            Gets and sets the property PartSize. 
            <para>
            The size, in bytes, that Amazon ECR expects future layer part uploads to be.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.InitiateLayerUploadResponse.UploadId">
            <summary>
            Gets and sets the property UploadId. 
            <para>
            The upload ID for the layer upload. This parameter is passed to further <a>UploadLayerPart</a>
            and <a>CompleteLayerUpload</a> operations.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.InvalidLayerException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidLayerException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidLayerException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidLayerException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidLayerException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidLayerException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.InvalidLayerPartException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerPartException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidLayerPartException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerPartException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidLayerPartException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerPartException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidLayerPartException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerPartException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidLayerPartException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerPartException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidLayerPartException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.InvalidParameterException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidParameterException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidParameterException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidParameterException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidParameterException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidParameterException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidParameterException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidParameterException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidParameterException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidParameterException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidParameterException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.Layer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Layer.LayerAvailability">
            <summary>
            Gets and sets the property LayerAvailability. 
            <para>
            The availability status of the image layer. Valid values are <code>AVAILABLE</code>
            and <code>UNAVAILABLE</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Layer.LayerDigest">
            <summary>
            Gets and sets the property LayerDigest. 
            <para>
            The <code>sha256</code> digest of the image layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Layer.LayerSize">
            <summary>
            Gets and sets the property LayerSize. 
            <para>
            The size, in bytes, of the image layer.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.LayerAlreadyExistsException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.LayerAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructs a new LayerAlreadyExistsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LayerAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerAlreadyExistsException.#ctor(System.Exception)">
            <summary>
            Construct instance of LayerAlreadyExistsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerAlreadyExistsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayerAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerAlreadyExistsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayerAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.LayerFailure">
            <summary>
            
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.LayerFailure.FailureCode">
            <summary>
            Gets and sets the property FailureCode. 
            <para>
            The failure code associated with the failure.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.LayerFailure.FailureReason">
            <summary>
            Gets and sets the property FailureReason. 
            <para>
            The reason for the failure.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.LayerFailure.LayerDigest">
            <summary>
            Gets and sets the property LayerDigest. 
            <para>
            The layer digest associated with the failure.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.LayerInaccessibleException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.LayerInaccessibleException.#ctor(System.String)">
            <summary>
            Constructs a new LayerInaccessibleException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerInaccessibleException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LayerInaccessibleException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerInaccessibleException.#ctor(System.Exception)">
            <summary>
            Construct instance of LayerInaccessibleException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerInaccessibleException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayerInaccessibleException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerInaccessibleException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayerInaccessibleException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.LayerPartTooSmallException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.LayerPartTooSmallException.#ctor(System.String)">
            <summary>
            Constructs a new LayerPartTooSmallException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerPartTooSmallException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LayerPartTooSmallException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerPartTooSmallException.#ctor(System.Exception)">
            <summary>
            Construct instance of LayerPartTooSmallException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerPartTooSmallException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayerPartTooSmallException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerPartTooSmallException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayerPartTooSmallException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.LayersNotFoundException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.LayersNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new LayersNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.LayersNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LayersNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayersNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of LayersNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayersNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayersNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayersNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayersNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.LimitExceededException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.LimitExceededException.#ctor(System.String)">
            <summary>
            Constructs a new LimitExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.LimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LimitExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LimitExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LimitExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.ListImagesRequest">
            <summary>
            Container for the parameters to the ListImages operation.
            Lists all the image IDs for a given repository.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ListImagesRequest.MaxResults">
            <summary>
            Gets and sets the property MaxResults. 
            <para>
            The maximum number of image results returned by <code>ListImages</code> in paginated
            output. When this parameter is used, <code>ListImages</code> only returns <code>maxResults</code>
            results in a single page along with a <code>nextToken</code> response element. The
            remaining results of the initial request can be seen by sending another <code>ListImages</code>
            request with the returned <code>nextToken</code> value. This value can be between
            1 and 100. If this parameter is not used, then <code>ListImages</code> returns up
            to 100 results and a <code>nextToken</code> value, if applicable.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ListImagesRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value returned from a previous paginated <code>ListImages</code>
            request where <code>maxResults</code> was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results that
            returned the <code>nextToken</code> value. This value is <code>null</code> when there
            are no more results to return.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ListImagesRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository to list
            images in. If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ListImagesRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository whose image IDs are to be listed.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.ListImagesResponse">
            <summary>
            This is the response object from the ListImages operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ListImagesResponse.ImageIds">
            <summary>
            Gets and sets the property ImageIds. 
            <para>
            The list of image IDs for the requested repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ListImagesResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value to include in a future <code>ListImages</code> request.
            When the results of a <code>ListImages</code> request exceed <code>maxResults</code>,
            this value can be used to retrieve the next page of results. This value is <code>null</code>
            when there are no more results to return.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.PutImageRequest">
            <summary>
            Container for the parameters to the PutImage operation.
            Creates or updates the image manifest associated with an image.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutImageRequest.ImageManifest">
            <summary>
            Gets and sets the property ImageManifest. 
            <para>
            The image manifest corresponding to the image to be uploaded.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutImageRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository in which
            to put the image. If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutImageRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository in which to put the image.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.PutImageResponse">
            <summary>
            This is the response object from the PutImage operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutImageResponse.Image">
            <summary>
            Gets and sets the property Image. 
            <para>
            Details of the image uploaded.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.Repository">
            <summary>
            Object representing a repository.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Repository.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Repository.RepositoryArn">
            <summary>
            Gets and sets the property RepositoryArn. 
            <para>
            The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the
            <code>arn:aws:ecr</code> namespace, followed by the region of the repository, the
            AWS account ID of the repository owner, the repository namespace, and then the repository
            name. For example, <code>arn:aws:ecr:region:012345678910:repository/test</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Repository.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.RepositoryAlreadyExistsException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructs a new RepositoryAlreadyExistsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of RepositoryAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryAlreadyExistsException.#ctor(System.Exception)">
            <summary>
            Construct instance of RepositoryAlreadyExistsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryAlreadyExistsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryAlreadyExistsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.RepositoryNotEmptyException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotEmptyException.#ctor(System.String)">
            <summary>
            Constructs a new RepositoryNotEmptyException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of RepositoryNotEmptyException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotEmptyException.#ctor(System.Exception)">
            <summary>
            Construct instance of RepositoryNotEmptyException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotEmptyException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryNotEmptyException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotEmptyException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryNotEmptyException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.RepositoryNotFoundException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new RepositoryNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of RepositoryNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of RepositoryNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.RepositoryPolicyNotFoundException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryPolicyNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new RepositoryPolicyNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryPolicyNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of RepositoryPolicyNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryPolicyNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of RepositoryPolicyNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryPolicyNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryPolicyNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryPolicyNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryPolicyNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.ServerException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.ServerException.#ctor(System.String)">
            <summary>
            Constructs a new ServerException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.ServerException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ServerException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.ServerException.#ctor(System.Exception)">
            <summary>
            Construct instance of ServerException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.ServerException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ServerException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.ServerException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ServerException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.SetRepositoryPolicyRequest">
            <summary>
            Container for the parameters to the SetRepositoryPolicy operation.
            Applies a repository policy on a specified repository to control access permissions.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.SetRepositoryPolicyRequest.Force">
            <summary>
            Gets and sets the property Force. 
            <para>
            If the policy you are attempting to set on a repository policy would prevent you from
            setting another policy in the future, you must force the <a>SetRepositoryPolicy</a>
            operation. This is intended to prevent accidental repository lock outs.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.SetRepositoryPolicyRequest.PolicyText">
            <summary>
            Gets and sets the property PolicyText. 
            <para>
            The JSON repository policy text to apply to the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.SetRepositoryPolicyRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository. If you
            do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.SetRepositoryPolicyRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository to receive the policy.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.SetRepositoryPolicyResponse">
            <summary>
            This is the response object from the SetRepositoryPolicy operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.SetRepositoryPolicyResponse.PolicyText">
            <summary>
            Gets and sets the property PolicyText. 
            <para>
            The JSON repository policy text applied to the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.SetRepositoryPolicyResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.SetRepositoryPolicyResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.UploadLayerPartRequest">
            <summary>
            Container for the parameters to the UploadLayerPart operation.
            Uploads an image layer part to Amazon ECR.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartRequest.LayerPartBlob">
            <summary>
            Gets and sets the property LayerPartBlob. 
            <para>
            The base64-encoded layer part payload.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartRequest.PartFirstByte">
            <summary>
            Gets and sets the property PartFirstByte. 
            <para>
            The integer value of the first byte of the layer part.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartRequest.PartLastByte">
            <summary>
            Gets and sets the property PartLastByte. 
            <para>
            The integer value of the last byte of the layer part.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that you are uploading layer parts
            to. If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository that you are uploading layer parts to.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartRequest.UploadId">
            <summary>
            Gets and sets the property UploadId. 
            <para>
            The upload ID from a previous <a>InitiateLayerUpload</a> operation to associate with
            the layer part upload.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.UploadLayerPartResponse">
            <summary>
            This is the response object from the UploadLayerPart operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartResponse.LastByteReceived">
            <summary>
            Gets and sets the property LastByteReceived. 
            <para>
            The integer value of the last byte received in the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartResponse.UploadId">
            <summary>
            Gets and sets the property UploadId. 
            <para>
            The upload ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.UploadNotFoundException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.UploadNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new UploadNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.UploadNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of UploadNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.UploadNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of UploadNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.UploadNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of UploadNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.UploadNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of UploadNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.AuthorizationDataUnmarshaller">
            <summary>
            Response Unmarshaller for AuthorizationData Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.AuthorizationDataUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#AuthorizationData,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.AuthorizationDataUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.AuthorizationDataUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityRequestMarshaller">
            <summary>
            BatchCheckLayerAvailability Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityRequestMarshaller.Marshall(Amazon.ECR.Model.BatchCheckLayerAvailabilityRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityResponseUnmarshaller">
            <summary>
            Response Unmarshaller for BatchCheckLayerAvailability operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.BatchDeleteImageRequestMarshaller">
            <summary>
            BatchDeleteImage Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchDeleteImageRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchDeleteImageRequestMarshaller.Marshall(Amazon.ECR.Model.BatchDeleteImageRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.BatchDeleteImageResponseUnmarshaller">
            <summary>
            Response Unmarshaller for BatchDeleteImage operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchDeleteImageResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchDeleteImageResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.BatchDeleteImageResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetImageRequestMarshaller">
            <summary>
            BatchGetImage Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetImageRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetImageRequestMarshaller.Marshall(Amazon.ECR.Model.BatchGetImageRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetImageResponseUnmarshaller">
            <summary>
            Response Unmarshaller for BatchGetImage operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetImageResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetImageResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetImageResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.CompleteLayerUploadRequestMarshaller">
            <summary>
            CompleteLayerUpload Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.CompleteLayerUploadRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.CompleteLayerUploadRequestMarshaller.Marshall(Amazon.ECR.Model.CompleteLayerUploadRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.CompleteLayerUploadResponseUnmarshaller">
            <summary>
            Response Unmarshaller for CompleteLayerUpload operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.CompleteLayerUploadResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.CompleteLayerUploadResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.CompleteLayerUploadResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.CreateRepositoryRequestMarshaller">
            <summary>
            CreateRepository Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.CreateRepositoryRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.CreateRepositoryRequestMarshaller.Marshall(Amazon.ECR.Model.CreateRepositoryRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.CreateRepositoryResponseUnmarshaller">
            <summary>
            Response Unmarshaller for CreateRepository operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.CreateRepositoryResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.CreateRepositoryResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.CreateRepositoryResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyRequestMarshaller">
            <summary>
            DeleteRepositoryPolicy Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyRequestMarshaller.Marshall(Amazon.ECR.Model.DeleteRepositoryPolicyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteRepositoryPolicy operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryRequestMarshaller">
            <summary>
            DeleteRepository Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryRequestMarshaller.Marshall(Amazon.ECR.Model.DeleteRepositoryRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteRepository operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRepositoriesRequestMarshaller">
            <summary>
            DescribeRepositories Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRepositoriesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRepositoriesRequestMarshaller.Marshall(Amazon.ECR.Model.DescribeRepositoriesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRepositoriesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeRepositories operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRepositoriesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRepositoriesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRepositoriesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.GetAuthorizationTokenRequestMarshaller">
            <summary>
            GetAuthorizationToken Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetAuthorizationTokenRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetAuthorizationTokenRequestMarshaller.Marshall(Amazon.ECR.Model.GetAuthorizationTokenRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.GetAuthorizationTokenResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetAuthorizationToken operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetAuthorizationTokenResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetAuthorizationTokenResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.GetAuthorizationTokenResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.GetDownloadUrlForLayerRequestMarshaller">
            <summary>
            GetDownloadUrlForLayer Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetDownloadUrlForLayerRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetDownloadUrlForLayerRequestMarshaller.Marshall(Amazon.ECR.Model.GetDownloadUrlForLayerRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.GetDownloadUrlForLayerResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetDownloadUrlForLayer operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetDownloadUrlForLayerResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetDownloadUrlForLayerResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.GetDownloadUrlForLayerResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.GetRepositoryPolicyRequestMarshaller">
            <summary>
            GetRepositoryPolicy Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetRepositoryPolicyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetRepositoryPolicyRequestMarshaller.Marshall(Amazon.ECR.Model.GetRepositoryPolicyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.GetRepositoryPolicyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetRepositoryPolicy operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetRepositoryPolicyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetRepositoryPolicyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.GetRepositoryPolicyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.ImageFailureUnmarshaller">
            <summary>
            Response Unmarshaller for ImageFailure Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ImageFailureUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#ImageFailure,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ImageFailureUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.ImageFailureUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.ImageIdentifierMarshaller">
            <summary>
            ImageIdentifier Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ImageIdentifierMarshaller.Marshall(Amazon.ECR.Model.ImageIdentifier,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.ECR.Model.Internal.MarshallTransformations.ImageIdentifierMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.ImageIdentifierUnmarshaller">
            <summary>
            Response Unmarshaller for ImageIdentifier Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ImageIdentifierUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#ImageIdentifier,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ImageIdentifierUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.ImageIdentifierUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.ImageUnmarshaller">
            <summary>
            Response Unmarshaller for Image Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ImageUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#Image,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ImageUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.ImageUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.InitiateLayerUploadRequestMarshaller">
            <summary>
            InitiateLayerUpload Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.InitiateLayerUploadRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.InitiateLayerUploadRequestMarshaller.Marshall(Amazon.ECR.Model.InitiateLayerUploadRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.InitiateLayerUploadResponseUnmarshaller">
            <summary>
            Response Unmarshaller for InitiateLayerUpload operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.InitiateLayerUploadResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.InitiateLayerUploadResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.InitiateLayerUploadResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.LayerFailureUnmarshaller">
            <summary>
            Response Unmarshaller for LayerFailure Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.LayerFailureUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#LayerFailure,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.LayerFailureUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.LayerFailureUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.LayerUnmarshaller">
            <summary>
            Response Unmarshaller for Layer Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.LayerUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#Layer,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.LayerUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.LayerUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesRequestMarshaller">
            <summary>
            ListImages Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesRequestMarshaller.Marshall(Amazon.ECR.Model.ListImagesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListImages operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageRequestMarshaller">
            <summary>
            PutImage Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageRequestMarshaller.Marshall(Amazon.ECR.Model.PutImageRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PutImage operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.RepositoryUnmarshaller">
            <summary>
            Response Unmarshaller for Repository Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.RepositoryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#Repository,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.RepositoryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.RepositoryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.SetRepositoryPolicyRequestMarshaller">
            <summary>
            SetRepositoryPolicy Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.SetRepositoryPolicyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.SetRepositoryPolicyRequestMarshaller.Marshall(Amazon.ECR.Model.SetRepositoryPolicyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.SetRepositoryPolicyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for SetRepositoryPolicy operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.SetRepositoryPolicyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.SetRepositoryPolicyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.SetRepositoryPolicyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.UploadLayerPartRequestMarshaller">
            <summary>
            UploadLayerPart Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.UploadLayerPartRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.UploadLayerPartRequestMarshaller.Marshall(Amazon.ECR.Model.UploadLayerPartRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.UploadLayerPartResponseUnmarshaller">
            <summary>
            Response Unmarshaller for UploadLayerPart operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.UploadLayerPartResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.UploadLayerPartResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.UploadLayerPartResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.AmazonECRClient">
             <summary>
             Implementation for accessing ECR
            
             Amazon EC2 Container Registry (Amazon ECR) is a managed AWS Docker registry service.
             Customers can use the familiar Docker CLI to push, pull, and manage images. Amazon
             ECR provides a secure, scalable, and reliable registry. Amazon ECR supports private
             Docker repositories with resource-based permissions using AWS IAM so that specific
             users or Amazon EC2 instances can access repositories and images. Developers can use
             the Docker CLI to author and manage images.
             </summary>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor">
             <summary>
             Constructs AmazonECRClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(Amazon.RegionEndpoint)">
             <summary>
             Constructs AmazonECRClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(Amazon.ECR.AmazonECRConfig)">
             <summary>
             Constructs AmazonECRClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="config">The AmazonECRClient Configuration Object</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(Amazon.Runtime.AWSCredentials)">
            <summary>
            Constructs AmazonECRClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonECRClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.ECR.AmazonECRConfig)">
            <summary>
            Constructs AmazonECRClient with AWS Credentials and an
            AmazonECRClient Configuration object.
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="clientConfig">The AmazonECRClient Configuration Object</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(System.String,System.String)">
            <summary>
            Constructs AmazonECRClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonECRClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(System.String,System.String,Amazon.ECR.AmazonECRConfig)">
            <summary>
            Constructs AmazonECRClient with AWS Access Key ID, AWS Secret Key and an
            AmazonECRClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="clientConfig">The AmazonECRClient Configuration Object</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs AmazonECRClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(System.String,System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonECRClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(System.String,System.String,System.String,Amazon.ECR.AmazonECRConfig)">
            <summary>
            Constructs AmazonECRClient with AWS Access Key ID, AWS Secret Key and an
            AmazonECRClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="clientConfig">The AmazonECRClient Configuration Object</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.CreateSigner">
            <summary>
            Creates the signer for the service.
            </summary>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.Dispose(System.Boolean)">
            <summary>
            Disposes the service client.
            </summary>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BatchCheckLayerAvailability(Amazon.ECR.Model.BatchCheckLayerAvailabilityRequest)">
            <summary>
            Check the availability of multiple image layers in a specified registry and repository.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchCheckLayerAvailability service method.</param>
            
            <returns>The response from the BatchCheckLayerAvailability service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BeginBatchCheckLayerAvailability(Amazon.ECR.Model.BatchCheckLayerAvailabilityRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the BatchCheckLayerAvailability operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the BatchCheckLayerAvailability operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndBatchCheckLayerAvailability
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.EndBatchCheckLayerAvailability(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  BatchCheckLayerAvailability operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginBatchCheckLayerAvailability.</param>
            
            <returns>Returns a  BatchCheckLayerAvailabilityResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BatchDeleteImage(Amazon.ECR.Model.BatchDeleteImageRequest)">
            <summary>
            Deletes a list of specified images within a specified repository. Images are specified
            with either <code>imageTag</code> or <code>imageDigest</code>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchDeleteImage service method.</param>
            
            <returns>The response from the BatchDeleteImage service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BeginBatchDeleteImage(Amazon.ECR.Model.BatchDeleteImageRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the BatchDeleteImage operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the BatchDeleteImage operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndBatchDeleteImage
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.EndBatchDeleteImage(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  BatchDeleteImage operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginBatchDeleteImage.</param>
            
            <returns>Returns a  BatchDeleteImageResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BatchGetImage(Amazon.ECR.Model.BatchGetImageRequest)">
            <summary>
            Gets detailed information for specified images within a specified repository. Images
            are specified with either <code>imageTag</code> or <code>imageDigest</code>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchGetImage service method.</param>
            
            <returns>The response from the BatchGetImage service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BeginBatchGetImage(Amazon.ECR.Model.BatchGetImageRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the BatchGetImage operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the BatchGetImage operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndBatchGetImage
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.EndBatchGetImage(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  BatchGetImage operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginBatchGetImage.</param>
            
            <returns>Returns a  BatchGetImageResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.CompleteLayerUpload(Amazon.ECR.Model.CompleteLayerUploadRequest)">
            <summary>
            Inform Amazon ECR that the image layer upload for a specified registry, repository
            name, and upload ID, has completed. You can optionally provide a <code>sha256</code>
            digest of the image layer for data validation purposes.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CompleteLayerUpload service method.</param>
            
            <returns>The response from the CompleteLayerUpload service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.EmptyUploadException">
            The specified layer upload does not contain any layer parts.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidLayerException">
            The layer digest calculation performed by Amazon ECR upon receipt of the image layer
            does not match the digest specified.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayerAlreadyExistsException">
            The image layer already exists in the associated repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayerPartTooSmallException">
            Layer parts must be at least 5 MiB in size.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECR.Model.UploadNotFoundException">
            The upload could not be found, or the specified upload id is not valid for this repository.
            </exception>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BeginCompleteLayerUpload(Amazon.ECR.Model.CompleteLayerUploadRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the CompleteLayerUpload operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the CompleteLayerUpload operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndCompleteLayerUpload
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.EndCompleteLayerUpload(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  CompleteLayerUpload operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginCompleteLayerUpload.</param>
            
            <returns>Returns a  CompleteLayerUploadResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.CreateRepository(Amazon.ECR.Model.CreateRepositoryRequest)">
            <summary>
            Creates an image repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateRepository service method.</param>
            
            <returns>The response from the CreateRepository service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="http://docs.aws.amazon.com/AmazonECR/latest/userguide/service_limits.html">Amazon
            ECR Default Service Limits</a> in the Amazon EC2 Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryAlreadyExistsException">
            The specified repository already exists in the specified registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BeginCreateRepository(Amazon.ECR.Model.CreateRepositoryRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the CreateRepository operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the CreateRepository operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndCreateRepository
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.EndCreateRepository(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  CreateRepository operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginCreateRepository.</param>
            
            <returns>Returns a  CreateRepositoryResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.DeleteRepository(Amazon.ECR.Model.DeleteRepositoryRequest)">
            <summary>
            Deletes an existing image repository. If a repository contains images, you must use
            the <code>force</code> option to delete it.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteRepository service method.</param>
            
            <returns>The response from the DeleteRepository service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotEmptyException">
            The specified repository contains images. To delete a repository that contains images,
            you must force the deletion with the <code>force</code> parameter.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BeginDeleteRepository(Amazon.ECR.Model.DeleteRepositoryRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the DeleteRepository operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DeleteRepository operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndDeleteRepository
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.EndDeleteRepository(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  DeleteRepository operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginDeleteRepository.</param>
            
            <returns>Returns a  DeleteRepositoryResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.DeleteRepositoryPolicy(Amazon.ECR.Model.DeleteRepositoryPolicyRequest)">
            <summary>
            Deletes the repository policy from a specified repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteRepositoryPolicy service method.</param>
            
            <returns>The response from the DeleteRepositoryPolicy service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryPolicyNotFoundException">
            The specified repository and registry combination does not have an associated repository
            policy.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BeginDeleteRepositoryPolicy(Amazon.ECR.Model.DeleteRepositoryPolicyRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the DeleteRepositoryPolicy operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DeleteRepositoryPolicy operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndDeleteRepositoryPolicy
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.EndDeleteRepositoryPolicy(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  DeleteRepositoryPolicy operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginDeleteRepositoryPolicy.</param>
            
            <returns>Returns a  DeleteRepositoryPolicyResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.DescribeRepositories(Amazon.ECR.Model.DescribeRepositoriesRequest)">
            <summary>
            Describes image repositories in a registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeRepositories service method.</param>
            
            <returns>The response from the DescribeRepositories service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BeginDescribeRepositories(Amazon.ECR.Model.DescribeRepositoriesRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the DescribeRepositories operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DescribeRepositories operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndDescribeRepositories
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.EndDescribeRepositories(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  DescribeRepositories operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginDescribeRepositories.</param>
            
            <returns>Returns a  DescribeRepositoriesResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.GetAuthorizationToken(Amazon.ECR.Model.GetAuthorizationTokenRequest)">
            <summary>
            Retrieves a token that is valid for a specified registry for 12 hours. This command
            allows you to use the <code>docker</code> CLI to push and pull images with Amazon
            ECR. If you do not specify a registry, the default registry is assumed.
            
             
            <para>
            The <code>authorizationToken</code> returned for each registry specified is a base64
            encoded string that can be decoded and used in a <code>docker login</code> command
            to authenticate to a registry. The AWS CLI offers an <code>aws ecr get-login</code>
            command that simplifies the login process.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetAuthorizationToken service method.</param>
            
            <returns>The response from the GetAuthorizationToken service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BeginGetAuthorizationToken(Amazon.ECR.Model.GetAuthorizationTokenRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the GetAuthorizationToken operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the GetAuthorizationToken operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndGetAuthorizationToken
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.EndGetAuthorizationToken(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  GetAuthorizationToken operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginGetAuthorizationToken.</param>
            
            <returns>Returns a  GetAuthorizationTokenResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.GetDownloadUrlForLayer(Amazon.ECR.Model.GetDownloadUrlForLayerRequest)">
            <summary>
            Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer. You
            can only get URLs for image layers that are referenced in an image.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetDownloadUrlForLayer service method.</param>
            
            <returns>The response from the GetDownloadUrlForLayer service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayerInaccessibleException">
            The specified layer is not available because it is not associated with an image. Unassociated
            image layers may be cleaned up at any time.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayersNotFoundException">
            The specified layers could not be found, or the specified layer is not valid for this
            repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BeginGetDownloadUrlForLayer(Amazon.ECR.Model.GetDownloadUrlForLayerRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the GetDownloadUrlForLayer operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the GetDownloadUrlForLayer operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndGetDownloadUrlForLayer
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.EndGetDownloadUrlForLayer(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  GetDownloadUrlForLayer operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginGetDownloadUrlForLayer.</param>
            
            <returns>Returns a  GetDownloadUrlForLayerResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.GetRepositoryPolicy(Amazon.ECR.Model.GetRepositoryPolicyRequest)">
            <summary>
            Retrieves the repository policy for a specified repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRepositoryPolicy service method.</param>
            
            <returns>The response from the GetRepositoryPolicy service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryPolicyNotFoundException">
            The specified repository and registry combination does not have an associated repository
            policy.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BeginGetRepositoryPolicy(Amazon.ECR.Model.GetRepositoryPolicyRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the GetRepositoryPolicy operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the GetRepositoryPolicy operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndGetRepositoryPolicy
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.EndGetRepositoryPolicy(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  GetRepositoryPolicy operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginGetRepositoryPolicy.</param>
            
            <returns>Returns a  GetRepositoryPolicyResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.InitiateLayerUpload(Amazon.ECR.Model.InitiateLayerUploadRequest)">
            <summary>
            Notify Amazon ECR that you intend to upload an image layer. 
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the InitiateLayerUpload service method.</param>
            
            <returns>The response from the InitiateLayerUpload service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BeginInitiateLayerUpload(Amazon.ECR.Model.InitiateLayerUploadRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the InitiateLayerUpload operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the InitiateLayerUpload operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndInitiateLayerUpload
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.EndInitiateLayerUpload(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  InitiateLayerUpload operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginInitiateLayerUpload.</param>
            
            <returns>Returns a  InitiateLayerUploadResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.ListImages(Amazon.ECR.Model.ListImagesRequest)">
            <summary>
            Lists all the image IDs for a given repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListImages service method.</param>
            
            <returns>The response from the ListImages service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BeginListImages(Amazon.ECR.Model.ListImagesRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the ListImages operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the ListImages operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndListImages
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.EndListImages(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  ListImages operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginListImages.</param>
            
            <returns>Returns a  ListImagesResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.PutImage(Amazon.ECR.Model.PutImageRequest)">
            <summary>
            Creates or updates the image manifest associated with an image.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutImage service method.</param>
            
            <returns>The response from the PutImage service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.ImageAlreadyExistsException">
            The specified image has already been pushed, and there are no changes to the manifest
            or image tag since the last push.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayersNotFoundException">
            The specified layers could not be found, or the specified layer is not valid for this
            repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="http://docs.aws.amazon.com/AmazonECR/latest/userguide/service_limits.html">Amazon
            ECR Default Service Limits</a> in the Amazon EC2 Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BeginPutImage(Amazon.ECR.Model.PutImageRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the PutImage operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the PutImage operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndPutImage
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.EndPutImage(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  PutImage operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginPutImage.</param>
            
            <returns>Returns a  PutImageResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.SetRepositoryPolicy(Amazon.ECR.Model.SetRepositoryPolicyRequest)">
            <summary>
            Applies a repository policy on a specified repository to control access permissions.
            </summary>
            <param name="request">Container for the necessary parameters to execute the SetRepositoryPolicy service method.</param>
            
            <returns>The response from the SetRepositoryPolicy service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BeginSetRepositoryPolicy(Amazon.ECR.Model.SetRepositoryPolicyRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the SetRepositoryPolicy operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the SetRepositoryPolicy operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndSetRepositoryPolicy
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.EndSetRepositoryPolicy(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  SetRepositoryPolicy operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginSetRepositoryPolicy.</param>
            
            <returns>Returns a  SetRepositoryPolicyResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.UploadLayerPart(Amazon.ECR.Model.UploadLayerPartRequest)">
            <summary>
            Uploads an image layer part to Amazon ECR.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UploadLayerPart service method.</param>
            
            <returns>The response from the UploadLayerPart service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidLayerPartException">
            The layer part size is not valid, or the first byte specified is not consecutive to
            the last byte of a previous layer part upload.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="http://docs.aws.amazon.com/AmazonECR/latest/userguide/service_limits.html">Amazon
            ECR Default Service Limits</a> in the Amazon EC2 Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECR.Model.UploadNotFoundException">
            The upload could not be found, or the specified upload id is not valid for this repository.
            </exception>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BeginUploadLayerPart(Amazon.ECR.Model.UploadLayerPartRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the UploadLayerPart operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the UploadLayerPart operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndUploadLayerPart
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.EndUploadLayerPart(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  UploadLayerPart operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginUploadLayerPart.</param>
            
            <returns>Returns a  UploadLayerPartResult from ECR.</returns>
        </member>
        <member name="T:Amazon.ECR.IAmazonECR">
             <summary>
             Interface for accessing ECR
            
             Amazon EC2 Container Registry (Amazon ECR) is a managed AWS Docker registry service.
             Customers can use the familiar Docker CLI to push, pull, and manage images. Amazon
             ECR provides a secure, scalable, and reliable registry. Amazon ECR supports private
             Docker repositories with resource-based permissions using AWS IAM so that specific
             users or Amazon EC2 instances can access repositories and images. Developers can use
             the Docker CLI to author and manage images.
             </summary>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BatchCheckLayerAvailability(Amazon.ECR.Model.BatchCheckLayerAvailabilityRequest)">
            <summary>
            Check the availability of multiple image layers in a specified registry and repository.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchCheckLayerAvailability service method.</param>
            
            <returns>The response from the BatchCheckLayerAvailability service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BeginBatchCheckLayerAvailability(Amazon.ECR.Model.BatchCheckLayerAvailabilityRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the BatchCheckLayerAvailability operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the BatchCheckLayerAvailability operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndBatchCheckLayerAvailability
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.EndBatchCheckLayerAvailability(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  BatchCheckLayerAvailability operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginBatchCheckLayerAvailability.</param>
            
            <returns>Returns a  BatchCheckLayerAvailabilityResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BatchDeleteImage(Amazon.ECR.Model.BatchDeleteImageRequest)">
            <summary>
            Deletes a list of specified images within a specified repository. Images are specified
            with either <code>imageTag</code> or <code>imageDigest</code>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchDeleteImage service method.</param>
            
            <returns>The response from the BatchDeleteImage service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BeginBatchDeleteImage(Amazon.ECR.Model.BatchDeleteImageRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the BatchDeleteImage operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the BatchDeleteImage operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndBatchDeleteImage
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.EndBatchDeleteImage(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  BatchDeleteImage operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginBatchDeleteImage.</param>
            
            <returns>Returns a  BatchDeleteImageResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BatchGetImage(Amazon.ECR.Model.BatchGetImageRequest)">
            <summary>
            Gets detailed information for specified images within a specified repository. Images
            are specified with either <code>imageTag</code> or <code>imageDigest</code>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchGetImage service method.</param>
            
            <returns>The response from the BatchGetImage service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BeginBatchGetImage(Amazon.ECR.Model.BatchGetImageRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the BatchGetImage operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the BatchGetImage operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndBatchGetImage
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.EndBatchGetImage(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  BatchGetImage operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginBatchGetImage.</param>
            
            <returns>Returns a  BatchGetImageResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.CompleteLayerUpload(Amazon.ECR.Model.CompleteLayerUploadRequest)">
            <summary>
            Inform Amazon ECR that the image layer upload for a specified registry, repository
            name, and upload ID, has completed. You can optionally provide a <code>sha256</code>
            digest of the image layer for data validation purposes.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CompleteLayerUpload service method.</param>
            
            <returns>The response from the CompleteLayerUpload service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.EmptyUploadException">
            The specified layer upload does not contain any layer parts.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidLayerException">
            The layer digest calculation performed by Amazon ECR upon receipt of the image layer
            does not match the digest specified.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayerAlreadyExistsException">
            The image layer already exists in the associated repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayerPartTooSmallException">
            Layer parts must be at least 5 MiB in size.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECR.Model.UploadNotFoundException">
            The upload could not be found, or the specified upload id is not valid for this repository.
            </exception>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BeginCompleteLayerUpload(Amazon.ECR.Model.CompleteLayerUploadRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the CompleteLayerUpload operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the CompleteLayerUpload operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndCompleteLayerUpload
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.EndCompleteLayerUpload(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  CompleteLayerUpload operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginCompleteLayerUpload.</param>
            
            <returns>Returns a  CompleteLayerUploadResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.CreateRepository(Amazon.ECR.Model.CreateRepositoryRequest)">
            <summary>
            Creates an image repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateRepository service method.</param>
            
            <returns>The response from the CreateRepository service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="http://docs.aws.amazon.com/AmazonECR/latest/userguide/service_limits.html">Amazon
            ECR Default Service Limits</a> in the Amazon EC2 Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryAlreadyExistsException">
            The specified repository already exists in the specified registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BeginCreateRepository(Amazon.ECR.Model.CreateRepositoryRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the CreateRepository operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the CreateRepository operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndCreateRepository
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.EndCreateRepository(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  CreateRepository operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginCreateRepository.</param>
            
            <returns>Returns a  CreateRepositoryResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.DeleteRepository(Amazon.ECR.Model.DeleteRepositoryRequest)">
            <summary>
            Deletes an existing image repository. If a repository contains images, you must use
            the <code>force</code> option to delete it.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteRepository service method.</param>
            
            <returns>The response from the DeleteRepository service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotEmptyException">
            The specified repository contains images. To delete a repository that contains images,
            you must force the deletion with the <code>force</code> parameter.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BeginDeleteRepository(Amazon.ECR.Model.DeleteRepositoryRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the DeleteRepository operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DeleteRepository operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndDeleteRepository
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.EndDeleteRepository(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  DeleteRepository operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginDeleteRepository.</param>
            
            <returns>Returns a  DeleteRepositoryResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.DeleteRepositoryPolicy(Amazon.ECR.Model.DeleteRepositoryPolicyRequest)">
            <summary>
            Deletes the repository policy from a specified repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteRepositoryPolicy service method.</param>
            
            <returns>The response from the DeleteRepositoryPolicy service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryPolicyNotFoundException">
            The specified repository and registry combination does not have an associated repository
            policy.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BeginDeleteRepositoryPolicy(Amazon.ECR.Model.DeleteRepositoryPolicyRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the DeleteRepositoryPolicy operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DeleteRepositoryPolicy operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndDeleteRepositoryPolicy
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.EndDeleteRepositoryPolicy(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  DeleteRepositoryPolicy operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginDeleteRepositoryPolicy.</param>
            
            <returns>Returns a  DeleteRepositoryPolicyResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.DescribeRepositories(Amazon.ECR.Model.DescribeRepositoriesRequest)">
            <summary>
            Describes image repositories in a registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeRepositories service method.</param>
            
            <returns>The response from the DescribeRepositories service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BeginDescribeRepositories(Amazon.ECR.Model.DescribeRepositoriesRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the DescribeRepositories operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DescribeRepositories operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndDescribeRepositories
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.EndDescribeRepositories(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  DescribeRepositories operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginDescribeRepositories.</param>
            
            <returns>Returns a  DescribeRepositoriesResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.GetAuthorizationToken(Amazon.ECR.Model.GetAuthorizationTokenRequest)">
            <summary>
            Retrieves a token that is valid for a specified registry for 12 hours. This command
            allows you to use the <code>docker</code> CLI to push and pull images with Amazon
            ECR. If you do not specify a registry, the default registry is assumed.
            
             
            <para>
            The <code>authorizationToken</code> returned for each registry specified is a base64
            encoded string that can be decoded and used in a <code>docker login</code> command
            to authenticate to a registry. The AWS CLI offers an <code>aws ecr get-login</code>
            command that simplifies the login process.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetAuthorizationToken service method.</param>
            
            <returns>The response from the GetAuthorizationToken service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BeginGetAuthorizationToken(Amazon.ECR.Model.GetAuthorizationTokenRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the GetAuthorizationToken operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the GetAuthorizationToken operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndGetAuthorizationToken
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.EndGetAuthorizationToken(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  GetAuthorizationToken operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginGetAuthorizationToken.</param>
            
            <returns>Returns a  GetAuthorizationTokenResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.GetDownloadUrlForLayer(Amazon.ECR.Model.GetDownloadUrlForLayerRequest)">
            <summary>
            Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer. You
            can only get URLs for image layers that are referenced in an image.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetDownloadUrlForLayer service method.</param>
            
            <returns>The response from the GetDownloadUrlForLayer service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayerInaccessibleException">
            The specified layer is not available because it is not associated with an image. Unassociated
            image layers may be cleaned up at any time.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayersNotFoundException">
            The specified layers could not be found, or the specified layer is not valid for this
            repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BeginGetDownloadUrlForLayer(Amazon.ECR.Model.GetDownloadUrlForLayerRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the GetDownloadUrlForLayer operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the GetDownloadUrlForLayer operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndGetDownloadUrlForLayer
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.EndGetDownloadUrlForLayer(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  GetDownloadUrlForLayer operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginGetDownloadUrlForLayer.</param>
            
            <returns>Returns a  GetDownloadUrlForLayerResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.GetRepositoryPolicy(Amazon.ECR.Model.GetRepositoryPolicyRequest)">
            <summary>
            Retrieves the repository policy for a specified repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRepositoryPolicy service method.</param>
            
            <returns>The response from the GetRepositoryPolicy service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryPolicyNotFoundException">
            The specified repository and registry combination does not have an associated repository
            policy.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BeginGetRepositoryPolicy(Amazon.ECR.Model.GetRepositoryPolicyRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the GetRepositoryPolicy operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the GetRepositoryPolicy operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndGetRepositoryPolicy
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.EndGetRepositoryPolicy(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  GetRepositoryPolicy operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginGetRepositoryPolicy.</param>
            
            <returns>Returns a  GetRepositoryPolicyResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.InitiateLayerUpload(Amazon.ECR.Model.InitiateLayerUploadRequest)">
            <summary>
            Notify Amazon ECR that you intend to upload an image layer. 
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the InitiateLayerUpload service method.</param>
            
            <returns>The response from the InitiateLayerUpload service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BeginInitiateLayerUpload(Amazon.ECR.Model.InitiateLayerUploadRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the InitiateLayerUpload operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the InitiateLayerUpload operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndInitiateLayerUpload
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.EndInitiateLayerUpload(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  InitiateLayerUpload operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginInitiateLayerUpload.</param>
            
            <returns>Returns a  InitiateLayerUploadResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.ListImages(Amazon.ECR.Model.ListImagesRequest)">
            <summary>
            Lists all the image IDs for a given repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListImages service method.</param>
            
            <returns>The response from the ListImages service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BeginListImages(Amazon.ECR.Model.ListImagesRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the ListImages operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the ListImages operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndListImages
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.EndListImages(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  ListImages operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginListImages.</param>
            
            <returns>Returns a  ListImagesResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.PutImage(Amazon.ECR.Model.PutImageRequest)">
            <summary>
            Creates or updates the image manifest associated with an image.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutImage service method.</param>
            
            <returns>The response from the PutImage service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.ImageAlreadyExistsException">
            The specified image has already been pushed, and there are no changes to the manifest
            or image tag since the last push.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayersNotFoundException">
            The specified layers could not be found, or the specified layer is not valid for this
            repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="http://docs.aws.amazon.com/AmazonECR/latest/userguide/service_limits.html">Amazon
            ECR Default Service Limits</a> in the Amazon EC2 Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BeginPutImage(Amazon.ECR.Model.PutImageRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the PutImage operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the PutImage operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndPutImage
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.EndPutImage(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  PutImage operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginPutImage.</param>
            
            <returns>Returns a  PutImageResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.SetRepositoryPolicy(Amazon.ECR.Model.SetRepositoryPolicyRequest)">
            <summary>
            Applies a repository policy on a specified repository to control access permissions.
            </summary>
            <param name="request">Container for the necessary parameters to execute the SetRepositoryPolicy service method.</param>
            
            <returns>The response from the SetRepositoryPolicy service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BeginSetRepositoryPolicy(Amazon.ECR.Model.SetRepositoryPolicyRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the SetRepositoryPolicy operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the SetRepositoryPolicy operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndSetRepositoryPolicy
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.EndSetRepositoryPolicy(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  SetRepositoryPolicy operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginSetRepositoryPolicy.</param>
            
            <returns>Returns a  SetRepositoryPolicyResult from ECR.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.UploadLayerPart(Amazon.ECR.Model.UploadLayerPartRequest)">
            <summary>
            Uploads an image layer part to Amazon ECR.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UploadLayerPart service method.</param>
            
            <returns>The response from the UploadLayerPart service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidLayerPartException">
            The layer part size is not valid, or the first byte specified is not consecutive to
            the last byte of a previous layer part upload.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="http://docs.aws.amazon.com/AmazonECR/latest/userguide/service_limits.html">Amazon
            ECR Default Service Limits</a> in the Amazon EC2 Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECR.Model.UploadNotFoundException">
            The upload could not be found, or the specified upload id is not valid for this repository.
            </exception>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BeginUploadLayerPart(Amazon.ECR.Model.UploadLayerPartRequest,System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the UploadLayerPart operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the UploadLayerPart operation on AmazonECRClient.</param>
            <param name="callback">An AsyncCallback delegate that is invoked when the operation completes.</param>
            <param name="state">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback
                     procedure using the AsyncState property.</param>
            
            <returns>An IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking EndUploadLayerPart
                    operation.</returns>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.EndUploadLayerPart(System.IAsyncResult)">
            <summary>
            Finishes the asynchronous execution of the  UploadLayerPart operation.
            </summary>
            
            <param name="asyncResult">The IAsyncResult returned by the call to BeginUploadLayerPart.</param>
            
            <returns>Returns a  UploadLayerPartResult from ECR.</returns>
        </member>
    </members>
</doc>
